max_priority = 9001

[db]
file = '/data/main.db'

[github]

# Information for securely interacting with GitHub. These are found/generated
# under <https://github.com/settings/applications>.

# A GitHub personal access token
access_token = "{{ homu.github.access-token }}"

# A GitHub oauth application for this instance of homu:
app_client_id = "{{ homu.github.app-client-id }}"
app_client_secret = "{{ homu.github.app-client-secret }}"


[git]

# Use the local Git command. Required to use some advanced features. It also
# speeds up Travis by reducing temporary commits
local_git = true

# SSH private key. Needed only when the local Git command is used
ssh_key = """
{{ homu.ssh.ssh-key }}
"""

[web]

host = '127.0.0.1'
port = 7942

[repo.rust]
owner = "rust-lang"
name = "rust"
timeout = 15300

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.rust.test-on-fork]
owner = "rust-lang-ci"
name = "rust"

[repo.rust.github]
secret = "{{ homu.repo-secrets.rust }}"
[repo.rust.checks.azure]
name = "fork-auto"
try_name = "fork-try"
[repo.rust.checks.actions]
name = "bors build finished"

# Automatic relabeling
[repo.rust.labels.approved]   # after homu received `r+`
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-crater', 'S-waiting-on-review', 'S-waiting-on-team']
add = ['S-waiting-on-bors']

[repo.rust.labels.rejected]   # after homu received `r-`
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-crater', 'S-waiting-on-review', 'S-waiting-on-team']
add = ['S-waiting-on-author']

[repo.rust.labels.failed]     # test failed (maybe spurious, so fall back to -on-review)
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-crater', 'S-waiting-on-review', 'S-waiting-on-team']
add = ['S-waiting-on-review']

[repo.rust.labels.timed_out]   # test timed out after 4 hours (almost always spurious, let reviewer retry)
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-crater', 'S-waiting-on-review', 'S-waiting-on-team']
add = ['S-waiting-on-review']

[repo.rust.labels.try_failed]  # try-build failed (almost always legit, tell author to fix the PR)
remove = ['S-waiting-on-review', 'S-waiting-on-crater']
add = ['S-waiting-on-author']

[repo.rust.labels.pushed]      # user pushed a commit after `r+`/`try`
remove = ['S-waiting-on-bors', 'S-waiting-on-author']
add = ['S-waiting-on-review']
unless = ['S-blocked', 'S-waiting-on-crater', 'S-waiting-on-team']

[repo.rust.labels.conflict]    # a merge conflict is detected (tell author to rebase)
remove = ['S-waiting-on-bors']
add = ['S-waiting-on-author']
unless = ['S-blocked', 'S-waiting-on-crater', 'S-waiting-on-team', 'S-waiting-on-review']

[repo.rust.labels.succeed]
add = ['merged-by-bors']

[repo.rust.labels.rollup_made]
add = ['rollup']

[repo.cargo]
owner = "rust-lang"
name = "cargo"
timeout = 7200

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.cargo.branch]
auto = "auto-cargo"
[repo.cargo.github]
secret = "{{ homu.repo-secrets.cargo }}"
[repo.cargo.checks.actions]
name = "bors build finished"
[repo.cargo.labels.approved]   # after homu received `r+`
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-review']
add = ['S-waiting-on-bors']
[repo.cargo.labels.rejected]   # after homu received `r-`
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-review']
add = ['S-waiting-on-author']
[repo.cargo.labels.failed]     # test failed (maybe spurious, so fall back to -on-review)
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-review']
add = ['S-waiting-on-review']
[repo.cargo.labels.timed_out]   # test timed out after 4 hours (almost always spurious, let reviewer retry)
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-review']
add = ['S-waiting-on-review']
[repo.cargo.labels.try_failed]  # try-build failed (almost always legit, tell author to fix the PR)
remove = ['S-waiting-on-review']
add = ['S-waiting-on-author']
[repo.cargo.labels.pushed]      # user pushed a commit after `r+`/`try`
remove = ['S-waiting-on-bors', 'S-waiting-on-author']
add = ['S-waiting-on-review']
unless = ['S-blocked']
[repo.cargo.labels.conflict]    # a merge conflict is detected (tell author to rebase)
remove = ['S-waiting-on-bors']
add = ['S-waiting-on-author']
unless = ['S-blocked', 'S-waiting-on-review']

[repo.libc]
owner = "rust-lang"
name = "libc"
timeout = 9000

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.libc.branch]
auto = "auto-libc"

[repo.libc.github]
secret = "{{ homu.repo-secrets.libc }}"

[repo.libc.status.azure]
context = "rust-lang.libc"
[repo.libc.checks.cirrus-freebsd-10]
name = "nightly x86_64-unknown-freebsd-10"
[repo.libc.checks.cirrus-freebsd-11]
name = "stable x86_64-unknown-freebsd-11"
[repo.libc.checks.cirrus-freebsd-12]
name = "nightly x86_64-unknown-freebsd-12"

[repo.stdarch]
owner = "rust-lang"
name = "stdarch"
timeout = 9000

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.stdarch.github]
secret = "{{ homu.repo-secrets.stdarch }}"

[repo.stdarch.status.azure]
context = "rust-lang.stdarch"
[repo.stdarch.checks.cirrus-freebsd]
name = "x86_64-unknown-freebsd"

[repo.rustup-rs]
owner = "rust-lang"
name = "rustup.rs"
timeout = 12600

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.rustup-rs.branch]
auto = "auto"

[repo.rustup-rs.github]
secret = "{{ homu.repo-secrets.rustup }}"

[repo.rustup-rs.checks.travis]
name = "Travis CI - Branch"
[repo.rustup-rs.status.appveyor]
context = "continuous-integration/appveyor/branch"

[repo.compiler-builtins]
owner = "rust-lang-nursery"
name = "compiler-builtins"

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.compiler-builtins.branch]
auto = "auto"

[repo.compiler-builtins.github]
secret = "{{ homu.repo-secrets.compiler-builtins }}"

[repo.compiler-builtins.checks.travis]
name = "Travis CI - Branch"
[repo.compiler-builtins.status.appveyor]
context = "continuous-integration/appveyor/branch"


[repo.crater]
owner = "rust-lang"
name = "crater"
timeout = 5400

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.crater.github]
secret = "{{ homu.repo-secrets.crater }}"
[repo.crater.checks.actions]
name = "bors build finished"

[repo.clippy]
owner = "rust-lang"
name = "rust-clippy"
timeout = 5400

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.clippy.branch]
auto = "auto"
[repo.clippy.github]
secret = "{{ homu.repo-secrets.clippy }}"
[repo.clippy.checks.action_test]
name = "bors test finished"
[repo.clippy.checks.action_dev_test]
name = "bors dev test finished"
[repo.clippy.checks.action_remark_test]
name = "bors remark test finished"

[repo.rls]
owner = "rust-lang"
name = "rls"
timeout = 5400

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.rls.github]
secret = "{{ homu.repo-secrets.rls }}"
[repo.rls.checks.azure]
name = "rust-lang.rls"

[repo.crates-io]
owner = "rust-lang"
name = "crates.io"
timeout = 1800

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.crates-io.github]
secret = "{{ homu.repo-secrets.crates-io }}"
[repo.crates-io.checks.travis]
name = "Travis CI - Branch"

[repo.chalk]
owner = "rust-lang"
name = "chalk"
timeout = 1800

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.chalk.github]
secret = "{{ homu.repo-secrets.chalk }}"
[repo.chalk.checks.actions]
name = "bors build finished"

[repo.rustlings]
owner = "rust-lang"
name = "rustlings"
timeout = 5400

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.rustlings.github]
secret = "{{ homu.repo-secrets.rustlings }}"
[repo.rustlings.checks.travis]
name = "Travis CI - Branch"

# Automatic relabeling
[repo.rustlings.labels.approved]   # after homu received `r+`
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-review']
add = ['S-waiting-on-bors']

[repo.rustlings.labels.rejected]   # after homu received `r-`
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-review']
add = ['S-waiting-on-author']

[repo.rustlings.labels.failed]     # test failed (maybe spurious, so fall back to -on-review)
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-review']
add = ['S-waiting-on-review']

[repo.rustlings.labels.timed_out]   # test timed out after 4 hours (almost always spurious, let reviewer retry)
remove = ['S-blocked', 'S-waiting-on-author', 'S-waiting-on-bors', 'S-waiting-on-review']
add = ['S-waiting-on-review']

[repo.rustlings.labels.try_failed]  # try-build failed (almost always legit, tell author to fix the PR)
remove = ['S-waiting-on-review']
add = ['S-waiting-on-author']

[repo.rustlings.labels.pushed]      # user pushed a commit after `r+`/`try`
remove = ['S-waiting-on-bors', 'S-waiting-on-author']
add = ['S-waiting-on-review']
unless = ['S-blocked']

[repo.rustlings.labels.conflict]    # a merge conflict is detected (tell author to rebase)
remove = ['S-waiting-on-bors']
add = ['S-waiting-on-author']
unless = ['S-blocked', 'S-waiting-on-review']

[repo.rustlings.labels.succeed]
add = ['merged-by-bors']

[repo.hashbrown]
owner = "rust-lang"
name = "hashbrown"
timeout = 5400

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.hashbrown.branch]
auto = "auto"
[repo.hashbrown.github]
secret = "{{ homu.repo-secrets.hashbrown }}"
[repo.hashbrown.checks.travis]
name = "Travis CI - Branch"

[repo.miri]
owner = "rust-lang"
name = "miri"
timeout = 7200

# Permissions managed through rust-lang/team
rust_team = true
reviewers = []
try_users = []

[repo.miri.branch]
auto = "auto"
[repo.miri.github]
secret = "{{ homu.repo-secrets.miri }}"
[repo.miri.checks.travis]
name = "Travis CI - Branch"
[repo.miri.status.appveyor]
context = "continuous-integration/appveyor/branch"
